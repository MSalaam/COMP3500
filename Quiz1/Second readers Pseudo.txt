Second readers-writers problem // Mohamad Salaam// COMP3500-002// Pseudocode for Second Reader-Writer problem using pthreadsInitialize readerCount, writerCount with 0;Initialize semaphores readerMutex, writerMutex, readerTry, resource with 0;Create method for reader() {Entering a reader()readerTry.P() 				// method for signaling a new readerreaderMutex.P() 				// method for locking entry to avoid oversharing resourcereaderCount++; 				// Increment readerCount If (readers are 1) { 			// statement to check how many reader there are in order to lock resource Resource.P(); 				// lock resource if 1readerMutex.V(); 			// unlock resource for other readersreaderTry.V() 				// reader done with resource}Reading method  ()create code for exiting reader()readerMutex.p() 				// if there are maximum readersreaderCount--: decrement readerCount for exitersif (readers are 0) { 			// check how many readers there are)resource.V() 				// unlock resource for others readerMutex.V() 				// end code for exiting readers and bring in new readers}Create method for writer() {Entering a writer() writerMutex.P(); 			// spot for a new writerwriterCount++; 				// Increment writer count if (writers are 1) { 			// check how many writers there are readTry.P() 				// keep new readers out of writingwriterMutex.V() 				// to open up space for new writerresource.P() 				// reserve spot for 1 writerwriting method ()resource.V() 				// unlock resource for otherscreate code for exiting writer()writerMutex.P() 				// keep new writers out writerCount--; 				// decrement writer to execute code for entering a new writerif(writers are 0) { 			// checks how many writers there arereaderTry.V() 				// allow new writers to enterwriterMutex.V() 				// spot for new writer